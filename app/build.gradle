plugins {
//    id 'com.android.application'
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jlleitschuh.gradle.ktlint' version '11.3.1'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

def appVersionName = "5.2.3"

def extractNativeLibs = false

def packageName = "org.linphone"

android {
    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    compileSdk 34
    defaultConfig {
        minSdk 23
//        applicationId 'org.linphone'
        buildConfigField("long", "VERSION_CODE", "1")
        buildConfigField("String","VERSION_NAME",'"1.0.0"')
        buildConfigField("String","APPLICATION_ID","\"${packageName}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"
        }

        debug {
            debuggable true
            jniDebuggable true

            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".debug.fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"
        }
    }

    buildFeatures {
        dataBinding = true
    }

    namespace 'org.linphone'
    packagingOptions {
        jniLibs {
            useLegacyPackaging extractNativeLibs
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.media:media:1.6.0'
    implementation "androidx.security:security-crypto-ktx:1.1.0-alpha06"
    implementation "androidx.window:window:1.2.0"

    def emoji_version = "1.4.0"
    implementation "androidx.emoji2:emoji2:$emoji_version"
    implementation "androidx.emoji2:emoji2-emojipicker:$emoji_version"

    def nav_version = "2.7.6"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation "androidx.slidingpanelayout:slidingpanelayout:1.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'

    // https://github.com/material-components/material-components-android/blob/master/LICENSE Apache v2.0
    implementation 'com.google.android.material:material:1.10.0'
    // https://github.com/google/flexbox-layout/blob/main/LICENSE Apache v2.0
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.github.kapilkori:LibraryCreation:0.0.11'

    // https://github.com/coil-kt/coil/blob/main/LICENSE.txt Apache v2.0
    def coil_version = "2.5.0"
    implementation("io.coil-kt:coil:$coil_version")
    implementation("io.coil-kt:coil-gif:$coil_version")
    implementation("io.coil-kt:coil-svg:$coil_version")
    implementation("io.coil-kt:coil-video:$coil_version")

    // https://github.com/Baseflow/PhotoView/blob/master/LICENSE Apache v2.0
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation 'org.linphone:linphone-sdk-android:5.3.40'

    // Only enable leak canary prior to release
    // debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
}

task generateContactsXml(type: Copy) {
    from 'contacts.xml'
    into "src/main/res/xml/"
    outputs.upToDateWhen { file('src/main/res/xml/contacts.xml').exists() }
    filter {
        line -> line
                .replaceAll('%%AUTO_GENERATED%%', 'This file has been automatically generated, do not edit or commit !')
                .replaceAll('%%PACKAGE_NAME%%', packageName)

    }
}
project.tasks['preBuild'].dependsOn 'generateContactsXml'

ktlint {
    android = true
    ignoreFailures = true
}

project.tasks['preBuild'].dependsOn 'ktlintFormat'

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.kapilkori'
                artifactId = 'wifi-wireless'
                version = '0.0.9'
            }
        }
    }
}
